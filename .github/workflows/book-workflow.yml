name: book workflow
on:
  workflow_dispatch:

  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - features/**
env:
  APPLICATION_NAME: "book-api"
  POSTGRES_USER: ${{vars.POSTGRES_USER}}
  POSTGRES_DB: ${{vars.POSTGRES_DB}}
  DB_HOST: postgres-db
jobs:
#  setup:
#    runs-on: ubuntu-latest
#    services:
#      postgres-db:
#        image: postgres:14-alpine
#        ports:
#          - 5432:5432
#        env:
#          POSTGRES_USER: ${{vars.POSTGRES_USER}}
#          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
#          POSTGRES_DB: ${{vars.POSTGRES_DB}}
#        options: >-
#          --health-cmd="pg_isready -U ${{ vars.POSTGRES_USER}}}"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=5
#    steps:
#      - name: Database
#        run: echo Database "Postgres Service l√§uft und Job parst korrekt"

  unit-testing:
    runs-on: ubuntu-latest
    container:
      image: maven:3.9.3-eclipse-temurin-17
#    env:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/${{vars.POSTGRES_DB}}
#      SPRING_DATASOURCE_USERNAME: ${{vars.POSTGRES_USER}}
#      SPRING_DATASOURCE_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Build and Test
        run: mvn clean test

  test-coverage:
    runs-on: ubuntu-latest
    container:
      image: maven:3.9.3-eclipse-temurin-17
    env:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/${{vars.POSTGRES_DB}}
#      SPRING_DATASOURCE_USERNAME: ${{vars.POSTGRES_USER}}
#      SPRING_DATASOURCE_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Test coverage with Jacoco
        run: mvn clean verify

  docker-containerization:
    needs:
      - unit-testing
      - test-coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{vars.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{vars.POSTGRES_DB}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Login to DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{vars.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_PASSWORD}}

      - name: Login to GitHUB
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          password: ${{github.repository_owner}}
          username: ${{secrets.GITHUB_TOKEN}}

      - name: Docker build for testing
        uses: docker/build-push-action@v6
        with:
          push: 'false'
          context: .
          tags: ${{env.APPLICATION_NAME}}/book:v${{github.run_number}}

      - name: Docker Image test
        run: |
          docker images
          docker run --name book-backend-app -d \
          -p 5051:5051 \
          -e SPRING_DATASOURCE_USERNAME=${{ vars.POSTGRES_USER }} \
          -e SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/${{ vars.POSTGRES_DB }} \
          ${{env.APPLICATION_NAME}}/book:v${{ github.run_number }}
          
          docker ps  
          docker logs book-backend-app

  dev-deploy:
    needs: docker-containerization
    runs-on: ubuntu-latest
    steps:
      - name: kubernetes deploy
        run: echo deploy on kubernetes